---
title: "Class 1 Intro to R"
author: "Yubo Rasmussen"
format: html
editor: visual
---

# Introduction

This notebook demonstrates how to define functions in R, plot them, and find solutions using graphical and numerical methods. Examples include calculating the maximum likelihood estimate (MLE) and solving equations.

## Exiting R

To exit R, use the following command:

```{r}
# Quit R
#q()
```

## Example 1: Partial Log-Likelihood Function

We start by defining and plotting the partial log-likelihood function, as used in the Cox model tutorial.

### Define the Function

The following code defines a function `PartialL` with argument `b`. The `{}` braces are necessary because the function spans multiple lines. The function's value is the last line without an assignment.

```{r}

```

### Plot the Function

We can plot `PartialL` over a range of `b` values using the following code:

```{r}

```

### Refine the Plot for MLE

To refine the plot and locate the MLE of `beta`, we can narrow the range of `b` values:

```{r}

```

### Create a Function to Refine the Plot

We can create a function to refine the plot further. This function takes the left and right bounds as arguments:

```{r}

```

## Example 2: Solving an Equation Graphically

### Define the Function

The following defines a function `My.function`. Note that `X` is a dummy argument in the definition:

```{r}

```

### Plot the Function

We can set up a sequence of `x` values and plot the function:

```{r}

```

### Solve the Equation Graphically

To solve the equation graphically, we can define another function to add a horizontal line at `y = 0` and refine the range:

```{r}

```

## Example 3: Newton-Raphson Method

### Define the Derivative and Algorithm

We first define the derivative of the function:

```{r}

```

Next, we define the Newton-Raphson algorithm using both `My.function` and `Deriv`:

```{r}

```

### Visualize Convergence

We can visualize the function with a plot to see how the solution converges:

```{r}

```
